// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using AdventureWorks.DbDatas;
using AdventureWorks.Entities;
using AdventureWorks.Entities.dboSchema;
using AdventureWorks.Entities.HumanResourcesSchema;
using AdventureWorks.Entities.PersonSchema;
using AdventureWorks.Entities.ProductionSchema;
using AdventureWorks.Entities.PurchasingSchema;
using AdventureWorks.Entities.SalesSchema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

#nullable disable

namespace AdventureWorks.DbDatas.Configurations
{
    public partial class DocumentConfiguration : IEntityTypeConfiguration<Document>
    {
        public void Configure(EntityTypeBuilder<Document> entity)
        {
            entity.HasKey(e => e.DocumentNode).HasName("PK_Document_DocumentNode");

            entity.ToTable("Document", "Production", tb => tb.HasComment("Product maintenance documents."));

            entity.Property(e => e.DocumentNode).HasComment("Primary key for Document records.");
            entity.Property(e => e.ChangeNumber).HasComment("Engineering change approval number.");
            entity.Property(e => e.Document1).HasComment("Complete document.");
            entity.Property(e => e.DocumentLevel)
                .HasComputedColumnSql("([DocumentNode].[GetLevel]())", false)
                .HasComment("Depth in the document hierarchy.");
            entity.Property(e => e.DocumentSummary).HasComment("Document abstract.");
            entity.Property(e => e.FileExtension).HasComment("File extension indicating the document type. For example, .doc or .txt.");
            entity.Property(e => e.FileName).HasComment("File name of the document");
            entity.Property(e => e.FolderFlag)
                .HasDefaultValue(false)
                .HasComment("0 = This is a folder, 1 = This is a document.");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Date and time the record was last updated.");
            entity.Property(e => e.Owner).HasComment("Employee who controls the document.  Foreign key to Employee.BusinessEntityID");
            entity.Property(e => e.Revision)
                .IsFixedLength()
                .HasComment("Revision number of the document. ");
            entity.Property(e => e.Status).HasComment("1 = Pending approval, 2 = Approved, 3 = Obsolete");
            entity.Property(e => e.Title).HasComment("Title of the document.");
            entity.Property(e => e.rowguid)
                .HasDefaultValueSql("(newid())")
                .HasComment("ROWGUIDCOL number uniquely identifying the record. Required for FileStream.");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Document> entity);
    }
}
