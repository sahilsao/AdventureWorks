// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using AdventureWorks.Data.Configurations;
using AdventureWorks.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
#nullable disable

namespace AdventureWorks.Data;

public partial class AdventureWorksContext : DbContext
{
    public AdventureWorksContext(DbContextOptions<AdventureWorksContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AWBuildVersion> AWBuildVersions { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<AddressType> AddressTypes { get; set; }

    public virtual DbSet<BillOfMaterial> BillOfMaterials { get; set; }

    public virtual DbSet<BusinessEntity> BusinessEntities { get; set; }

    public virtual DbSet<BusinessEntityAddress> BusinessEntityAddresses { get; set; }

    public virtual DbSet<BusinessEntityContact> BusinessEntityContacts { get; set; }

    public virtual DbSet<ContactType> ContactTypes { get; set; }

    public virtual DbSet<CountryRegion> CountryRegions { get; set; }

    public virtual DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; }

    public virtual DbSet<CreditCard> CreditCards { get; set; }

    public virtual DbSet<Culture> Cultures { get; set; }

    public virtual DbSet<Currency> Currencies { get; set; }

    public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<DatabaseLog> DatabaseLogs { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<EmailAddress> EmailAddresses { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; }

    public virtual DbSet<EmployeePayHistory> EmployeePayHistories { get; set; }

    public virtual DbSet<ErrorLog> ErrorLogs { get; set; }

    public virtual DbSet<Illustration> Illustrations { get; set; }

    public virtual DbSet<JobCandidate> JobCandidates { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<Password> Passwords { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<PersonCreditCard> PersonCreditCards { get; set; }

    public virtual DbSet<PersonPhone> PersonPhones { get; set; }

    public virtual DbSet<PhoneNumberType> PhoneNumberTypes { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductCostHistory> ProductCostHistories { get; set; }

    public virtual DbSet<ProductDescription> ProductDescriptions { get; set; }

    public virtual DbSet<ProductInventory> ProductInventories { get; set; }

    public virtual DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; }

    public virtual DbSet<ProductModel> ProductModels { get; set; }

    public virtual DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; }

    public virtual DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; }

    public virtual DbSet<ProductPhoto> ProductPhotos { get; set; }

    public virtual DbSet<ProductProductPhoto> ProductProductPhotos { get; set; }

    public virtual DbSet<ProductReview> ProductReviews { get; set; }

    public virtual DbSet<ProductSubcategory> ProductSubcategories { get; set; }

    public virtual DbSet<ProductVendor> ProductVendors { get; set; }

    public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }

    public virtual DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }

    public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }

    public virtual DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }

    public virtual DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; }

    public virtual DbSet<SalesPerson> SalesPeople { get; set; }

    public virtual DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; }

    public virtual DbSet<SalesReason> SalesReasons { get; set; }

    public virtual DbSet<SalesTaxRate> SalesTaxRates { get; set; }

    public virtual DbSet<SalesTerritory> SalesTerritories { get; set; }

    public virtual DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; }

    public virtual DbSet<ScrapReason> ScrapReasons { get; set; }

    public virtual DbSet<Shift> Shifts { get; set; }

    public virtual DbSet<ShipMethod> ShipMethods { get; set; }

    public virtual DbSet<ShoppingCartItem> ShoppingCartItems { get; set; }

    public virtual DbSet<SpecialOffer> SpecialOffers { get; set; }

    public virtual DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; }

    public virtual DbSet<StateProvince> StateProvinces { get; set; }

    public virtual DbSet<Store> Stores { get; set; }

    public virtual DbSet<TransactionHistory> TransactionHistories { get; set; }

    public virtual DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; }

    public virtual DbSet<UnitMeasure> UnitMeasures { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    public virtual DbSet<WorkOrder> WorkOrders { get; set; }

    public virtual DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; }

    public virtual DbSet<vAdditionalContactInfo> vAdditionalContactInfos { get; set; }

    public virtual DbSet<vEmployee> vEmployees { get; set; }

    public virtual DbSet<vEmployeeDepartment> vEmployeeDepartments { get; set; }

    public virtual DbSet<vEmployeeDepartmentHistory> vEmployeeDepartmentHistories { get; set; }

    public virtual DbSet<vIndividualCustomer> vIndividualCustomers { get; set; }

    public virtual DbSet<vJobCandidate> vJobCandidates { get; set; }

    public virtual DbSet<vJobCandidateEducation> vJobCandidateEducations { get; set; }

    public virtual DbSet<vJobCandidateEmployment> vJobCandidateEmployments { get; set; }

    public virtual DbSet<vPersonDemographic> vPersonDemographics { get; set; }

    public virtual DbSet<vProductAndDescription> vProductAndDescriptions { get; set; }

    public virtual DbSet<vProductModelCatalogDescription> vProductModelCatalogDescriptions { get; set; }

    public virtual DbSet<vProductModelInstruction> vProductModelInstructions { get; set; }

    public virtual DbSet<vSalesPerson> vSalesPeople { get; set; }

    public virtual DbSet<vSalesPersonSalesByFiscalYear> vSalesPersonSalesByFiscalYears { get; set; }

    public virtual DbSet<vStateProvinceCountryRegion> vStateProvinceCountryRegions { get; set; }

    public virtual DbSet<vStoreWithAddress> vStoreWithAddresses { get; set; }

    public virtual DbSet<vStoreWithContact> vStoreWithContacts { get; set; }

    public virtual DbSet<vStoreWithDemographic> vStoreWithDemographics { get; set; }

    public virtual DbSet<vVendorWithAddress> vVendorWithAddresses { get; set; }

    public virtual DbSet<vVendorWithContact> vVendorWithContacts { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfiguration(new Configurations.AWBuildVersionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AddressTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BillOfMaterialConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BusinessEntityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BusinessEntityAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BusinessEntityContactConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CountryRegionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CountryRegionCurrencyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CreditCardConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CultureConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CurrencyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CurrencyRateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CustomerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DatabaseLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DepartmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmailAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmployeeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmployeeDepartmentHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmployeePayHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ErrorLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.IllustrationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.JobCandidateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LocationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PasswordConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PersonConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PersonCreditCardConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PersonPhoneConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhoneNumberTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductCostHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductDescriptionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductInventoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductListPriceHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductModelConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductModelIllustrationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductModelProductDescriptionCultureConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductPhotoConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductProductPhotoConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductReviewConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductSubcategoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductVendorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PurchaseOrderDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PurchaseOrderHeaderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesOrderDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesOrderHeaderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesOrderHeaderSalesReasonConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesPersonConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesPersonQuotaHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesReasonConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesTaxRateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesTerritoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesTerritoryHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ScrapReasonConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ShiftConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ShipMethodConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ShoppingCartItemConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SpecialOfferConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SpecialOfferProductConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.StateProvinceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.StoreConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TransactionHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TransactionHistoryArchiveConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UnitMeasureConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VendorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkOrderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkOrderRoutingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vAdditionalContactInfoConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vEmployeeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vEmployeeDepartmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vEmployeeDepartmentHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vIndividualCustomerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vJobCandidateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vJobCandidateEducationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vJobCandidateEmploymentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vPersonDemographicConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vProductAndDescriptionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vProductModelCatalogDescriptionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vProductModelInstructionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vSalesPersonConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vSalesPersonSalesByFiscalYearConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vStateProvinceCountryRegionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vStoreWithAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vStoreWithContactConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vStoreWithDemographicConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vVendorWithAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.vVendorWithContactConfiguration());

        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
